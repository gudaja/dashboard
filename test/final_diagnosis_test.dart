import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:dashboard/dashboard.dart';

void main() {
  group(
      'üî¨ OSTATECZNA DIAGNOZA: Dok≈Çadne testowanie wszystkich kierunk√≥w resize',
      () {
    testWidgets('üéØ Test wszystkich kierunk√≥w resize z virtual columns',
        (WidgetTester tester) async {
      print('üî¨ OSTATECZNA DIAGNOZA - TEST WSZYSTKICH KIERUNK√ìW');
      print('');

      final controller = DashboardItemController<DashboardItem>(items: [
        DashboardItem(
          identifier: 'test_widget',
          width: 2,
          height: 2,
          startX: 2, // ≈örodek gridu - kolumny 2-3
          startY: 1, // ≈örodek gridu - wiersze 1-2
          minWidth: 1,
          minHeight: 1,
        ),
      ]);

      final virtualConfig = VirtualColumnsConfig.visible(
        disabledColumns: [0, 4],
        disabledColumnWidth: 0.1, // 10% szeroko≈õci ka≈ºda
      );

      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: SizedBox(
              width: 600,
              height: 400,
              child: Dashboard<DashboardItem>(
                itemBuilder: (item) => Container(
                  decoration: BoxDecoration(
                    color: Colors.red,
                    border: Border.all(color: Colors.black, width: 3),
                  ),
                  child: Center(
                    child: Text(
                      'TEST ALL\n(${item.layoutData.startX}-${item.layoutData.startX + item.layoutData.width - 1})',
                      textAlign: TextAlign.center,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
                dashboardItemController: controller,
                slotCount: 6,
                slotHeight: 100,
                virtualColumnsConfig: virtualConfig,
                editModeSettings: EditModeSettings(
                  resizeCursorSide: 20,
                  longPressEnabled: true,
                  panEnabled: true,
                ),
              ),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();
      print('‚úÖ Dashboard za≈Çadowany');

      final widgetFinder = find.text('TEST ALL\n(2-3)');
      expect(widgetFinder, findsOneWidget);

      await tester.longPress(widgetFinder);
      await tester.pumpAndSettle();
      print('üëÜ Edit mode aktywowany');

      final originalRect = tester.getRect(widgetFinder);
      print('üìê Original rect: $originalRect');
      print('   Szeroko≈õƒá: ${originalRect.width}');
      print('   Wysoko≈õƒá: ${originalRect.height}');
      print('   Left: ${originalRect.left}');
      print('   Right: ${originalRect.right}');
      print('   Top: ${originalRect.top}');
      print('   Bottom: ${originalRect.bottom}');
      print('');

      // TEST 1: LEWA STRONA
      print('üîç TEST 1: RESIZE Z LEWEJ STRONY');
      final leftPoint = Offset(originalRect.left + 5, originalRect.center.dy);
      print('   Punkt: $leftPoint');

      final leftGesture = await tester.startGesture(leftPoint);
      await tester.pump(const Duration(milliseconds: 100));
      await leftGesture.moveBy(const Offset(-30, 0));
      await tester.pump(const Duration(milliseconds: 100));
      await leftGesture.up();
      await tester.pumpAndSettle();

      final afterLeftRect = tester.getRect(widgetFinder);
      bool leftWorked = (afterLeftRect != originalRect);
      print('   ‚úÖ Czy zadzia≈Ça≈Ço? $leftWorked');
      if (leftWorked) {
        print(
            '   üìä Zmiana: width ${originalRect.width} ‚Üí ${afterLeftRect.width}');
        print(
            '   üìä Zmiana: left ${originalRect.left} ‚Üí ${afterLeftRect.left}');
      }
      print('');

      // TEST 2: PRAWA STRONA
      print('üîç TEST 2: RESIZE Z PRAWEJ STRONY');
      final rightPoint =
          Offset(afterLeftRect.right - 5, afterLeftRect.center.dy);
      print('   Punkt: $rightPoint');

      final rightGesture = await tester.startGesture(rightPoint);
      await tester.pump(const Duration(milliseconds: 100));
      await rightGesture.moveBy(const Offset(30, 0));
      await tester.pump(const Duration(milliseconds: 100));
      await rightGesture.up();
      await tester.pumpAndSettle();

      final afterRightRect = tester.getRect(widgetFinder);
      bool rightWorked = (afterRightRect != afterLeftRect);
      print('   ‚úÖ Czy zadzia≈Ça≈Ço? $rightWorked');
      if (rightWorked) {
        print(
            '   üìä Zmiana: width ${afterLeftRect.width} ‚Üí ${afterRightRect.width}');
        print(
            '   üìä Zmiana: right ${afterLeftRect.right} ‚Üí ${afterRightRect.right}');
      }
      print('');

      // TEST 3: G√ìRA
      print('üîç TEST 3: RESIZE Z G√ìRY');
      final topPoint = Offset(afterRightRect.center.dx, afterRightRect.top + 5);
      print('   Punkt: $topPoint');

      final topGesture = await tester.startGesture(topPoint);
      await tester.pump(const Duration(milliseconds: 100));
      await topGesture.moveBy(const Offset(0, -30));
      await tester.pump(const Duration(milliseconds: 100));
      await topGesture.up();
      await tester.pumpAndSettle();

      final afterTopRect = tester.getRect(widgetFinder);
      bool topWorked = (afterTopRect != afterRightRect);
      print('   ‚úÖ Czy zadzia≈Ça≈Ço? $topWorked');
      if (topWorked) {
        print(
            '   üìä Zmiana: height ${afterRightRect.height} ‚Üí ${afterTopRect.height}');
        print('   üìä Zmiana: top ${afterRightRect.top} ‚Üí ${afterTopRect.top}');
      }
      print('');

      // TEST 4: D√ì≈Å
      print('üîç TEST 4: RESIZE Z DO≈ÅU');
      final bottomPoint =
          Offset(afterTopRect.center.dx, afterTopRect.bottom - 5);
      print('   Punkt: $bottomPoint');

      final bottomGesture = await tester.startGesture(bottomPoint);
      await tester.pump(const Duration(milliseconds: 100));
      await bottomGesture.moveBy(const Offset(0, 30));
      await tester.pump(const Duration(milliseconds: 100));
      await bottomGesture.up();
      await tester.pumpAndSettle();

      final finalRect = tester.getRect(widgetFinder);
      bool bottomWorked = (finalRect != afterTopRect);
      print('   ‚úÖ Czy zadzia≈Ça≈Ço? $bottomWorked');
      if (bottomWorked) {
        print(
            '   üìä Zmiana: height ${afterTopRect.height} ‚Üí ${finalRect.height}');
        print(
            '   üìä Zmiana: bottom ${afterTopRect.bottom} ‚Üí ${finalRect.bottom}');
      }
      print('');

      // PODSUMOWANIE
      print('üìã PODSUMOWANIE WYNIK√ìW:');
      print('   ‚¨ÖÔ∏è Lewa strona:   ${leftWorked ? "‚úÖ DZIA≈ÅA" : "‚ùå NIE DZIA≈ÅA"}');
      print(
          '   ‚û°Ô∏è Prawa strona:  ${rightWorked ? "‚úÖ DZIA≈ÅA" : "‚ùå NIE DZIA≈ÅA"}');
      print('   ‚¨ÜÔ∏è G√≥ra:          ${topWorked ? "‚úÖ DZIA≈ÅA" : "‚ùå NIE DZIA≈ÅA"}');
      print(
          '   ‚¨áÔ∏è D√≥≈Ç:           ${bottomWorked ? "‚úÖ DZIA≈ÅA" : "‚ùå NIE DZIA≈ÅA"}');
      print('');

      if (!leftWorked && rightWorked && topWorked && bottomWorked) {
        print('üéØ DIAGNOZA: Tylko lewa strona nie dzia≈Ça - user m√≥wi prawdƒô!');
      } else if (!leftWorked && !rightWorked && !topWorked && !bottomWorked) {
        print(
            'üö® DIAGNOZA: ≈ªaden kierunek nie dzia≈Ça - problem z ca≈Çym systemem resize');
      } else {
        print('üîç DIAGNOZA: Mieszane wyniki - problem czƒô≈õciowy');
      }

      print('');
      print('üìê RECT PROGRESSION:');
      print('   Original: $originalRect');
      print('   Po left:  $afterLeftRect');
      print('   Po right: $afterRightRect');
      print('   Po top:   $afterTopRect');
      print('   Final:    $finalRect');
    });

    testWidgets('üß™ POR√ìWNANIE: bez virtual columns (kontrola)',
        (WidgetTester tester) async {
      print('');
      print('üß™ TEST KONTROLNY: BEZ VIRTUAL COLUMNS');

      final controller = DashboardItemController<DashboardItem>(items: [
        DashboardItem(
          identifier: 'control_widget',
          width: 2,
          height: 2,
          startX: 2,
          startY: 1,
          minWidth: 1,
          minHeight: 1,
        ),
      ]);

      await tester.pumpWidget(
        MaterialApp(
          home: Scaffold(
            body: SizedBox(
              width: 600,
              height: 400,
              child: Dashboard<DashboardItem>(
                itemBuilder: (item) => Container(
                  decoration: BoxDecoration(
                    color: Colors.green,
                    border: Border.all(color: Colors.black, width: 3),
                  ),
                  child: Center(
                    child: Text(
                      'CONTROL\n(${item.layoutData.startX}-${item.layoutData.startX + item.layoutData.width - 1})',
                      textAlign: TextAlign.center,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
                dashboardItemController: controller,
                slotCount: 6,
                slotHeight: 100,
                // Brak virtualColumnsConfig
                editModeSettings: EditModeSettings(
                  resizeCursorSide: 20,
                  longPressEnabled: true,
                  panEnabled: true,
                ),
              ),
            ),
          ),
        ),
      );

      await tester.pumpAndSettle();

      final widgetFinder = find.text('CONTROL\n(2-3)');
      expect(widgetFinder, findsOneWidget);

      await tester.longPress(widgetFinder);
      await tester.pumpAndSettle();

      final originalRect = tester.getRect(widgetFinder);

      // Test tylko lewej strony dla szybko≈õci
      final leftPoint = Offset(originalRect.left + 5, originalRect.center.dy);
      final leftGesture = await tester.startGesture(leftPoint);
      await tester.pump(const Duration(milliseconds: 100));
      await leftGesture.moveBy(const Offset(-30, 0));
      await tester.pump(const Duration(milliseconds: 100));
      await leftGesture.up();
      await tester.pumpAndSettle();

      final afterLeftRect = tester.getRect(widgetFinder);
      bool leftWorked = (afterLeftRect != originalRect);

      print('üìã WYNIK KONTROLNY:');
      print(
          '   ‚¨ÖÔ∏è Lewa strona bez virtual columns: ${leftWorked ? "‚úÖ DZIA≈ÅA" : "‚ùå NIE DZIA≈ÅA"}');

      if (leftWorked) {
        print(
            '   üìä Potwierdza ≈ºe mechanizm resize dzia≈Ça gdy nie ma virtual columns');
      } else {
        print(
            '   üö® Problem mo≈ºe byƒá w ca≈Çym systemie resize, nie tylko virtual columns');
      }
    });
  });
}
